syntax = "proto3";
package demo.v1;

import "demo/v1/healthz.proto";
import "demo/v1/user.proto";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
// 为生成 OpenAPI 文档提供相关注释（如标题、版本、作者、许可证等信息）
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/yanking/app-skeleton/api/gen/demo/v1;v1";
// OpenAPI 全局配置，提供详细配置信息，用于生成 OpenAPI 文档
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    // API名称
    title: "App-Skeleton API"
    // API版本
    version: "1.0"
    // API 描述
    description: ""
    // 开发者的联系方式，包括项目名称、网址和电子邮件
    contact: {
      name: "小而美的博客项目"
      url: "https://github.com/yanking/app-skeleton"
      email: "colin404@foxmail.com"
    }
  }
  //  指定访问协议为 HTTP
  schemes: HTTP
  // 定义了服务的请求和响应的数据格式为 application/json
  consumes: "application/json"
  produces: "application/json"
};

service DemoService {
  rpc Echo(EchoRequest) returns (EchoResponse) {
    option (google.api.http) = {
      post: "/v1/demo/echo"
      body: "*"
    };
  }

  rpc Healthz(google.protobuf.Empty) returns (HealthzResponse) {
    option (google.api.http) = {get: "/v1/demo/healthz"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      // 在 OpenAPI 文档中的接口简要描述，为"服务健康检查"
      summary: "服务健康检查"
      // 标识该操作的唯一ID，为"Healthz"
      operation_id: "Healthz"
      // 将该接口归类为"服务治理"
      tags: "服务治理"
    };
  }
}